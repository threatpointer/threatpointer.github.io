<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress.com" created="2017-12-24 08:21"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Mohammed Tanveer</title>
	<link>https://threatpointerblog.wordpress.com</link>
	<description>Personal experiences from the world of Information Security</description>
	<pubDate>Sun, 24 Dec 2017 08:21:10 +0000</pubDate>
	<language></language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>https://threatpointerblog.wordpress.com</wp:base_blog_url>

	<wp:author><wp:author_id>101704710</wp:author_id><wp:author_login><![CDATA[threatpointerblog]]></wp:author_login><wp:author_email><![CDATA[mohammedtanveer@live.com]]></wp:author_email><wp:author_display_name><![CDATA[threatpointerblog]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>470589</wp:term_id><wp:category_nicename>pentesting</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[PenTesting]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>1483996</wp:term_id><wp:category_nicename>windows-internals</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Windows Internals]]></wp:cat_name>
</wp:category>
	<wp:tag><wp:term_id>592069</wp:term_id><wp:tag_slug>pentest</wp:tag_slug><wp:tag_name><![CDATA[PenTest]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>178495</wp:term_id><wp:tag_slug>powershell</wp:tag_slug><wp:tag_name><![CDATA[PowerShell]]></wp:tag_name>
</wp:tag>

	<generator>http://wordpress.com/</generator>
<image>
		<url>http://1.gravatar.com/blavatar/57f5461882cc54f3b8ed7f730d966950?s=96&#038;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</url>
		<title>Mohammed Tanveer</title>
		<link>https://threatpointerblog.wordpress.com</link>
	</image>
		
	<item>
		<title>About</title>
		<link>https://threatpointerblog.wordpress.com/about/</link>
		<pubDate>Sat, 27 Feb 2016 15:11:47 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.wordpress.com/?page_id=1</guid>
		<description></description>
		<content:encoded><![CDATA[This is an example of a page. Unlike posts, which are displayed on your blog’s front page in the order they’re published, pages are better suited for more timeless content that you want to be easily accessible, like your About or Contact information. Click the Edit link to make changes to this page or <a title="Direct link to Add New Page in your Dashboard" href="https://wordpress.com/page/107622472/new/">add another page</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date>2016-02-27 15:11:47</wp:post_date>
		<wp:post_date_gmt>2016-02-27 15:11:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PenTesting PowerShell Remoting</title>
		<link>https://threatpointerblog.wordpress.com/2016/02/27/pentesting-powershell-remoting/</link>
		<pubDate>Sat, 27 Feb 2016 16:05:51 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">https://threatpointerblog.wordpress.com/?p=2</guid>
		<description></description>
		<content:encoded><![CDATA[I have been planning to kick off my blog for sometime now and has just not happened, until now. I intend to share my experiences and notes mostly i take while I learn something. My first blog is about an article I wrote for <a href="https://pentestmag.com/magazines/" target="_blank">PenTest Magazine</a> for their PowerShell edition, published in January 2016.

PowerShell has been around for quite some time now. Taking humble steps, from a downloadable edition of PowerShell v1.0 for Windows XP, SP2 &amp; Windows 2003 to becoming available by default starting Windows 2008, indeed it has come a long way yet going stronger! I am very sure we must have used this blue screen command line interface sometime in our lives, it could even be just hitting the 'ls' command :) A Linux inclined friend of mine uses PowerShell for this, funny right :)

Today, let's talk about one of coolest features of PowerShell -Windows Remote Management (WinRM), which became available from Version 2.0. I am assuming most of us are already familiar around this topic, establishing remote connections and exercising commands such as Enter-PsSession, Get-PsSession etc. In case, you are not, I am anyway covering the basics around it and you can follow on

WinRM 101:

<a href="https://msdn.microsoft.com/en-us/library/aa384426(v=vs.85).aspx">Windows Remote Management</a> (WinRM) is a 'service' providing Remoting features over the WS-MAN Protocol (<a href="https://msdn.microsoft.com/en-us/library/aa384470(v=vs.85).aspx">WS-Management Protocol</a>). This framework was designed to be a secure and reliable method for managing computer that’s built on Simple Object Access Protocol (SOAP) and HTTP

Some of you may ask, why Windows Remoting while we have WMI and VB scripting that could get us similar functionality. We often see that something that works perfectly fine in our local system fails badly when executed in remote systems, this is because that particular API can only be used locally and is not available on the remote machine. PowerShell on the other hand does not rely over the programing interfaces to talk to remote computers. It simply connects the local Windows PowerShell Session to another Session running on the remote system. The commands that are executed are sent to the remote computer and executed locally there and then the results are sent back. We can establish similar sessions across multiple computers at the same time. We can connect to as many computers as we want, while Microsoft mentioned they tested with 25000 computers. However, commands executed are run in 32 computers by default considering the overhead it may have on the system, this is still configurable if needed. Windows Remoting is turned on by default for Windows 2012, Servers prior to this needs to be enabled manually and so do the client machines.

Considering Remoting to be enabled in all client machines, we can push a Group Policy to ease this task. Refer the this <a href="https://www.penflip.com/powershellorg/secrets-of-powershell-remoting/blob/master/configuring-remoting-via-gpo.txt">article</a> for detailed instructions to do this. Having said that, let me walk you through the steps to configure a 1-1 communication between Windows Server 2012 and a client running Windows 10 and explore the weakness and hardening mechanisms.

Quick &amp; Default configuration<strong>:</strong>

<strong>Enable-PSRemoting</strong>

<img class=" size-full wp-image-14 aligncenter" src="https://threatpointerblog.files.wordpress.com/2016/02/enable-psremoting.png" alt="Enable-PSRemoting" width="828" height="523" />

Enable-PsRemoting: This command is going to perform a quick default configuration of Windows Remoting. As shown in the above screenshot it explains the things it does. We can run the same command on both the ends and should enable Remoting. We can establish a connection using the command 'Enter-PsSession' and takes an argument -Computername (this will be the remote computer) in my case it will be pos.

<img class="alignnone size-full wp-image-11" src="https://threatpointerblog.files.wordpress.com/2016/02/pos.png" alt="pos" width="390" height="49" />

If everything goes well, you will get to see something as shown in the above figure. This is a remote shell that could be used for any given administrative task. That being said, the questions that we need to ask ourselves is what happened in the background that gave us a shell, we never used a username or a password.. Let's take a step back and look at the default configuration &amp; imagine what could go wrong and how to better it.

We have something called as <a href="https://technet.microsoft.com/en-us/library/ee126186%28v=vs.85%29.aspx?f=255&amp;MSPPError=-2147217396">PowerShell Providers</a> and simply put they act as a drive in this context. Upon, executing this command we should see a drive for wsman and we could cd into it. We can explore the directories here and should give us a complete picture of the settings that are enabled by default.

<img class="alignnone size-full wp-image-12" src="https://threatpointerblog.files.wordpress.com/2016/02/get-psprovider.png" alt="Get-PsProvider" width="849" height="395" />Now that we understand how Remoting works and with the awareness of the configuration settings, let me point you to some of the areas where we should lookout while assessing Windows Remoting.

<strong>Authentication: </strong>Windows Remoting supports 6 types of authentication. When we were testing our connection during the configuration steps, we used Kerberos authentication. This is default when we do not specify the authentication scheme and attempted to connect computers.

<img class="alignnone size-full wp-image-8" src="https://threatpointerblog.files.wordpress.com/2016/02/authentication.png" alt="Authentication" width="847" height="109" />

<strong>The Double Hop problem</strong>: An administrator uses PowerShell Remoting to connect to Server A and then attempts to connect from Server A to Server B. Unfortunately, the second connection fails. As a workaround, PowerShell provides the CredSSP (Credential Security Support Provider) option. When using CredSSP, PowerShell will perform a “Network Clear-text Logon” instead of a “Network Logon”. Network Clear-text Logon works by sending the user’s clear-text password to the remote server. When using CredSSP, Server A will be sent the user’s clear-text password, and will therefore be able to authenticate to Server B. Double hop works! Joe better known as "clymb3r" explains in details <a href="http://www.powershellmagazine.com/2014/03/06/accidental-sabotage-beware-of-credssp/">here</a>.

<img class="alignnone size-full wp-image-10" src="https://threatpointerblog.files.wordpress.com/2016/02/double-hop.png" alt="Double-Hop" width="576" height="203" />

&nbsp;

<strong>Applications: </strong>That being said on the network side, we may encounter products that may use Windows Remoting while integrating Microsoft Products. Examples, application integrating with IIS Server components or fetching alerts from the SCOM server etc. Both these applications from Microsoft provide PowerShell Providers for scripting purposes. It's only a matter of time that we see this to become a common trend. For use of simplicity applications may simply accept user credentials and pass them to remote computers using Basic authentication. If something of this is noticed a Wireshark capture should help us identify such issues.

<strong>Untrusted Domains: </strong>When attempted to remote from one domain to another domain and there is no trust between them. There is no way for my computer to verify the identity to whatever that I connect to. My computer is going to send packets to an IP address but there is no way to verify if the IP belonged to the actual computer I intended to send. Simply put, I will not have mutual authentication. To fix it, we need to disable the need for mutual authentication &amp; the need for trusts between domains.

SSL &amp; Trusted host list are the two tools that could come handy in this case. For SSL we could either go to an external vendor to issue us certificates which is definitely going to cost us or we could use ADCS (Active Directory Certificate Services) &amp; use this to provide

Trusted host list can be found here: Wsman:localhost\client\trusted host which is an item listed empty by default
<p style="padding-left:30px;"><strong>Issues- Common Credentials :</strong> In some cases, we you may notice that Remoting into computers of the same domain and an untrusted domain with a user that is common on both might just work. What I mean by this is, when we specify a computer list that are part of different domains in the same script block it will not work. However, some administrators might have a common user that are part of both the computers (different domains) and not specifying a domain could just do the trick</p>
<p style="padding-left:30px;">Classic Example: Invoke-command -ScriptBlock {get-evenlog -LogName security -Newest 10 } -ComputerName pos.trusteddomain.com, pos1.Untrusteddomain.com -Credential Administrator</p>
<p style="padding-left:30px;">Not many a times we encounter this issue at our production sites but is something worth to check. The fix is pretty straightforward to have no common passwords. If the username and password is same on both the computers then it would work. However, at the same time if explicitly mentioned the domain name within the command, it would not work as it would use Kerberos authentication</p>
<p style="padding-left:30px;"><strong>Issues- Trusted Host</strong>: Normally we would add in the computer name to the list and would do the trick. However, if a network attacker were to spoof DNS on that IP Address, then there is no way for you to tell that you are actually connecting to the computer that you intended too. We are giving up on mutual authentication, we don't know for a fact that sent credentials were to the real 'computer.domain'.</p>
However, this issues could be resolved when enabled we enable SSL. You will need generate a CSR for the computer within the untrusted domain and have it provided to the Certificate Authority. Depending on your choice you make, either an external one or an Internal Active Directory provided one. Please make sure that we are providing complete details while generating the Certificate Request. You may then import the Certificate issued to your computer and the Root Certificate if that requested from an external vendor. Once imported, grab the Thumbprint of the certificate issued to you and create your new HTTPS listener.
<p style="padding-left:30px;">Command:</p>

<pre style="padding-left:30px;">New-WSManlnstance -ResourceURI winrm/config/Listener -SelectorSet 
@{Address=’*”;Transport=’HTTPS’) -ValueSet @{Hostname=’computer.untrustedDomain.com’;
CertificateThumbprint=’60E49D63E304B9E1D148608346462713E8F1C16E’}</pre>
<p style="padding-left:30px;"><img class="  wp-image-9 alignnone" src="https://threatpointerblog.files.wordpress.com/2016/02/cmd.png?w=680" alt="cmd" width="650" height="29" /></p>
<p style="padding-left:30px;">Test the connection: Enter-PsSession -Computername computer.untrustedDomain.com -UseSSL -Credential untrustedDomain\Adminsitrator</p>
<strong>AllowUnencrypted = True: </strong>Quite often we see a lot of code snippets that are shared over the Internet and we simply use them within our environments. Once such example is blogs that show you how to enable CredSSP without discussing the problems around them. This is what we are not supposed to do. . :)
<pre style="padding-left:30px;">winrm set winrm/config/client/auth @{Basic="true"}</pre>
<p style="padding-left:30px;">winrm set winrm/config/service/auth @{Basic="true"}</p>
<p style="padding-left:30px;">winrm set winrm/config/service @{AllowUnencrypted="true"}</p>
<p style="padding-left:30px;">Microsoft's PowerShell Team explains the same in great details within their <a href="http://blogs.msdn.com/b/powershell/archive/2015/10/27/compromising-yourself-with-winrm-s-allowunencrypted-true.aspx">blog</a>: Compromising Yourself with WinRM’s “AllowUnencrypted = True”</p>
<strong>Delegated Administration</strong>: The goal of this concept is to allow a certain user group to run certain set of Administrative commands. For example, enabling Help Desk to Enable or Disable Active Directory account only using this channel. We would create a New-PsSessionConfigurationFile, import the Modules needed for the task and provide the cmdlets needed. If I were to stick to the example I mentioned, the command would look something like this-
<pre>Command: New-PSSessionConfigurationFile -Path c:\helpdesk.pssc -ModuleToImport</pre>
<pre>activedirectory -VisableCmdlets 'Enable-AdAccount','Disable-ADAccount'</pre>
This would create a <strong>.pssc</strong> file which is nothing but a text file which will have plenty of parameters, just as you would find within an Hashtable- 'key = value'. Then, the next step would be to register the endpoint. Following screenshot explains the same-

<img class="alignnone size-full wp-image-15" src="https://threatpointerblog.files.wordpress.com/2016/02/register-pssessionconfig.png" alt="Register-PsSessionConfig" width="840" height="543" />

Here we would simply add the HelpDesk User Group and we would we all okay.
<p style="padding-left:30px;"><strong>Issues: Delegated Admins: </strong>Usually the SDDL parameter is not completely understood &amp; end up providing User Groups that may not necessarily require permissions. One would simply Google how to look up the Security Descriptor for a user group and append it to the existing ones. I have found a lot of issues around this area, where all authenticated users would Read\Write permissions and is something to watch out for.</p>
<strong>PowerShell Session Configuration: </strong>The <em>Set-PSSessionConfiguration</em> cmdlet changes the properties of the session configurations on the local computer. Beginning in Windows PowerShell 3.0, you can use a session configuration file to define a session configuration. This feature provides a simple and discoverable method for setting and changing the properties of sessions that use the session configuration. Session configurations define the environment of remote sessions (PSSessions) that connect to the local computer. Every PSSession uses a session configuration. The session configuration determines the features of the PSSession, such as the modules that are available in the session, the cmdlets that are permitted to run, the language mode, quotas, and timeouts. The security descriptor (SDDL) of the session configuration determines who can use the session configuration to connect to the local computer.

A quick Get-PsSessionConfiguration gives you an exhaustive list of settings that are available. The screenshot listed below is a partial output of the command-

<img class="alignnone size-full wp-image-7" src="https://threatpointerblog.files.wordpress.com/2016/02/get-psconfig.png" alt="Get-PsConfig" width="830" height="827" />

We can watch out for some of the following settings to see if they are away from the default ones-
<ul>
	<li>Check for the 'SecurityDescriptorSddl' or the Permission parameter both should resolve to the same, explaining what user groups have permissions</li>
	<li>'RunAsPassword' -is blank by default</li>
	<li>'RunAsUser' - is blank by default</li>
</ul>
<strong>PowerShell Web Remoting: </strong>It gives you a web based interface into a gateway computer which then uses PowerShell Remoting to get you to a computer that you need. To be able to install: Add-WindowsFeature windowspowershellwebaccess, this will make module available called PowerShellWebAccess. Exploring this would give you Install-PswaWebApplication.

This will only work when HTTPS is enabled. This means the computer at which we are attempting to install should be enabled with SSL something which we have seen previously. You should see something like this when you bring this up on your Web Browser

<img class="alignnone size-full wp-image-13" src="https://threatpointerblog.files.wordpress.com/2016/02/pswebaccess.png" alt="PsWebAccess" width="546" height="439" />

<strong>Issues Web Remoting: </strong>The most common pit fall is when configuring the Add-PswaAuthoriztionRule. Microsoft's documentation on this explains the classic problem <a href="https://technet.microsoft.com/en-us/library/jj592890(v=wps.630).aspx">here</a>. Example 6: use of wildcard entries enables all users to be able to connect to all computers for any configuration :)

By no means this is close to being an exhaustive list to perform checks when auditing Windows Remoting features. However, the aim was to set you out on the right direction so we explore further. If you have done something different or would like to share your experiences with Windows Remoting- hit me on twitter: @threatpointer or write me: mohammed.tanveer1@gmail.com. Hoping this was helpful to you guys, until next time, keep PowerShelling!

Cheers!

References:
<ul>
	<li><a href="https://msdn.microsoft.com/en-us/library/aa384470(v=vs.85).aspx">https://msdn.microsoft.com/en-us/library/aa384470(v=vs.85).aspx</a></li>
	<li><a href="http://blogs.msdn.com/b/powershell/archive/2015/10/27/compromising-yourself-with-winrm-s-allowunencrypted-true.aspx">http://blogs.msdn.com/b/powershell/archive/2015/10/27/compromising-yourself-with-winrm-s-allowunencrypted-true.aspx</a></li>
	<li><a href="https://www.penflip.com/powershellorg/secrets-of-powershell-remoting/blob/master/configuring-remoting-via-gpo.txt">https://www.penflip.com/powershellorg/secrets-of-powershell-remoting/blob/master/configuring-remoting-via-gpo.txt</a></li>
	<li><a href="https://technet.microsoft.com/en-us/library/ee126186%28v=vs.85%29.aspx?f=255&amp;MSPPError=-2147217396">https://technet.microsoft.com/en-us/library/ee126186%28v=vs.85%29.aspx?f=255&amp;MSPPError=-2147217396</a></li>
	<li><a href="http://www.powershellmagazine.com/2014/03/06/accidental-sabotage-beware-of-credssp/">http://www.powershellmagazine.com/2014/03/06/accidental-sabotage-beware-of-credssp/</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2016-02-27 16:05:51</wp:post_date>
		<wp:post_date_gmt>2016-02-27 16:05:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pentesting-powershell-remoting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="pentest"><![CDATA[PenTest]]></category>
		<category domain="category" nicename="pentesting"><![CDATA[PenTesting]]></category>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[20234314323]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[inspecting-windows-remoting]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[inspecting-powershell-remoting]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Get-PsConfig</title>
		<link>https://threatpointerblog.wordpress.com/2016/02/27/pentesting-powershell-remoting/get-psconfig/</link>
		<pubDate>Sat, 27 Feb 2016 15:20:08 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2016/02/get-psconfig.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date>2016-02-27 15:20:08</wp:post_date>
		<wp:post_date_gmt>2016-02-27 15:20:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>get-psconfig</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2016/02/get-psconfig.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/get-psconfig.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:830;s:6:"height";i:827;s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/get-psconfig.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Authentication</title>
		<link>https://threatpointerblog.wordpress.com/2016/02/27/pentesting-powershell-remoting/authentication/</link>
		<pubDate>Sat, 27 Feb 2016 15:20:27 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2016/02/authentication.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2016-02-27 15:20:27</wp:post_date>
		<wp:post_date_gmt>2016-02-27 15:20:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>authentication</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2016/02/authentication.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/authentication.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:847;s:6:"height";i:109;s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/authentication.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cmd</title>
		<link>https://threatpointerblog.wordpress.com/2016/02/27/pentesting-powershell-remoting/cmd/</link>
		<pubDate>Sat, 27 Feb 2016 15:20:27 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2016/02/cmd.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2016-02-27 15:20:27</wp:post_date>
		<wp:post_date_gmt>2016-02-27 15:20:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cmd</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2016/02/cmd.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/cmd.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:843;s:6:"height";i:37;s:4:"file";s:80:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/cmd.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Double-Hop</title>
		<link>https://threatpointerblog.wordpress.com/2016/02/27/pentesting-powershell-remoting/double-hop/</link>
		<pubDate>Sat, 27 Feb 2016 15:20:27 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2016/02/double-hop.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2016-02-27 15:20:27</wp:post_date>
		<wp:post_date_gmt>2016-02-27 15:20:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>double-hop</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2016/02/double-hop.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/double-hop.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:576;s:6:"height";i:203;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/double-hop.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pos</title>
		<link>https://threatpointerblog.wordpress.com/2016/02/27/pentesting-powershell-remoting/pos/</link>
		<pubDate>Sat, 27 Feb 2016 15:20:27 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2016/02/pos.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2016-02-27 15:20:27</wp:post_date>
		<wp:post_date_gmt>2016-02-27 15:20:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>pos</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2016/02/pos.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/pos.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:390;s:6:"height";i:49;s:4:"file";s:80:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/pos.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Get-PsProvider</title>
		<link>https://threatpointerblog.wordpress.com/2016/02/27/pentesting-powershell-remoting/get-psprovider/</link>
		<pubDate>Sat, 27 Feb 2016 15:20:28 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2016/02/get-psprovider.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2016-02-27 15:20:28</wp:post_date>
		<wp:post_date_gmt>2016-02-27 15:20:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>get-psprovider</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2016/02/get-psprovider.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/get-psprovider.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:849;s:6:"height";i:395;s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/get-psprovider.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PsWebAccess</title>
		<link>https://threatpointerblog.wordpress.com/2016/02/27/pentesting-powershell-remoting/pswebaccess/</link>
		<pubDate>Sat, 27 Feb 2016 15:20:28 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2016/02/pswebaccess.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2016-02-27 15:20:28</wp:post_date>
		<wp:post_date_gmt>2016-02-27 15:20:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>pswebaccess</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2016/02/pswebaccess.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/pswebaccess.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:546;s:6:"height";i:439;s:4:"file";s:88:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/pswebaccess.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Enable-PSRemoting</title>
		<link>https://threatpointerblog.wordpress.com/2016/02/27/pentesting-powershell-remoting/enable-psremoting/</link>
		<pubDate>Sat, 27 Feb 2016 15:20:28 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2016/02/enable-psremoting.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2016-02-27 15:20:28</wp:post_date>
		<wp:post_date_gmt>2016-02-27 15:20:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>enable-psremoting</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2016/02/enable-psremoting.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/enable-psremoting.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:828;s:6:"height";i:523;s:4:"file";s:94:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/enable-psremoting.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Register-PsSessionConfig</title>
		<link>https://threatpointerblog.wordpress.com/2016/02/27/pentesting-powershell-remoting/register-pssessionconfig/</link>
		<pubDate>Sat, 27 Feb 2016 15:20:28 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2016/02/register-pssessionconfig.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2016-02-27 15:20:28</wp:post_date>
		<wp:post_date_gmt>2016-02-27 15:20:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>register-pssessionconfig</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2016/02/register-pssessionconfig.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/register-pssessionconfig.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:840;s:6:"height";i:543;s:4:"file";s:101:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2016/02/register-pssessionconfig.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Windows Internals- Basics</title>
		<link>https://threatpointerblog.wordpress.com/?p=85</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">https://threatpointerblog.wordpress.com/?p=85</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>85</wp:post_id>
		<wp:post_date>2016-06-07 18:11:47</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>mutex</title>
		<link>https://threatpointerblog.wordpress.com/2017/10/02/windows-internals-process-threads/mutex/</link>
		<pubDate>Mon, 02 Oct 2017 09:05:09 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2017/10/mutex.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date>2017-10-02 09:05:09</wp:post_date>
		<wp:post_date_gmt>2017-10-02 09:05:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>mutex</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>87</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2017/10/mutex.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/mutex.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1096;s:6:"height";i:540;s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/mutex.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:109411;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Virtual Memory</title>
		<link>https://threatpointerblog.wordpress.com/2017/10/02/windows-internals-process-threads/virtual-memory/</link>
		<pubDate>Mon, 02 Oct 2017 09:06:34 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2017/10/virtual-memory.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>91</wp:post_id>
		<wp:post_date>2017-10-02 09:06:34</wp:post_date>
		<wp:post_date_gmt>2017-10-02 09:06:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>virtual-memory</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>87</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2017/10/virtual-memory.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/virtual-memory.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:926;s:6:"height";i:620;s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/virtual-memory.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:168649;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Process</title>
		<link>https://threatpointerblog.wordpress.com/2017/10/02/windows-internals-process-threads/process/</link>
		<pubDate>Mon, 02 Oct 2017 09:51:38 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2017/10/process.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>192</wp:post_id>
		<wp:post_date>2017-10-02 09:51:38</wp:post_date>
		<wp:post_date_gmt>2017-10-02 09:51:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>process</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>87</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2017/10/process.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/process.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1148;s:6:"height";i:588;s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/process.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:10217;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>threads</title>
		<link>https://threatpointerblog.wordpress.com/2017/10/02/windows-internals-process-threads/threads/</link>
		<pubDate>Mon, 02 Oct 2017 10:04:43 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2017/10/threads.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>213</wp:post_id>
		<wp:post_date>2017-10-02 10:04:43</wp:post_date>
		<wp:post_date_gmt>2017-10-02 10:04:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>threads</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>87</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2017/10/threads.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/threads.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1045;s:6:"height";i:556;s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/threads.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:21654;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>func</title>
		<link>https://threatpointerblog.wordpress.com/2017/10/02/windows-internals-process-threads/func/</link>
		<pubDate>Mon, 02 Oct 2017 10:05:33 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2017/10/func.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date>2017-10-02 10:05:33</wp:post_date>
		<wp:post_date_gmt>2017-10-02 10:05:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>func</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>87</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2017/10/func.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/func.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:655;s:6:"height";i:293;s:4:"file";s:81:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/func.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:6608;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Thread Priorities</title>
		<link>https://threatpointerblog.wordpress.com/2017/10/02/windows-internals-process-threads/thread-priorities/</link>
		<pubDate>Mon, 02 Oct 2017 10:08:11 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2017/10/thread-priorities.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date>2017-10-02 10:08:11</wp:post_date>
		<wp:post_date_gmt>2017-10-02 10:08:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>thread-priorities</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>87</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2017/10/thread-priorities.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/thread-priorities.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:972;s:6:"height";i:639;s:4:"file";s:94:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/thread-priorities.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:235681;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Stress</title>
		<link>https://threatpointerblog.wordpress.com/2017/10/02/windows-internals-process-threads/stress/</link>
		<pubDate>Mon, 02 Oct 2017 10:08:58 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2017/10/stress.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date>2017-10-02 10:08:58</wp:post_date>
		<wp:post_date_gmt>2017-10-02 10:08:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>stress</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>87</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2017/10/stress.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/stress.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:792;s:6:"height";i:718;s:4:"file";s:83:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/stress.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:23516;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Priority</title>
		<link>https://threatpointerblog.wordpress.com/2017/10/02/windows-internals-process-threads/priority/</link>
		<pubDate>Mon, 02 Oct 2017 10:10:18 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2017/10/priority.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>232</wp:post_id>
		<wp:post_date>2017-10-02 10:10:18</wp:post_date>
		<wp:post_date_gmt>2017-10-02 10:10:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>priority</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>87</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2017/10/priority.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/priority.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:823;s:6:"height";i:661;s:4:"file";s:85:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/priority.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:117329;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Windows Internals- Process &#038; Threads</title>
		<link>https://threatpointerblog.wordpress.com/2017/10/02/windows-internals-process-threads/</link>
		<pubDate>Mon, 02 Oct 2017 10:45:32 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">https://threatpointerblog.wordpress.com/?p=87</guid>
		<description></description>
		<content:encoded><![CDATA[As &amp; when I refer my notes from time to time to clear my thoughts, it struck me- this is private to me only. This could probably help someone starting out or to even someone who'd like to visualize &amp; clear the air- Off course we could go through the books like we had to but this is more abstract. With those thoughts, i'd like to start enlisting my notes on the basics of Windows Internals (Its raw, feel free to drop a comment for any questions if you may)

Any feedback around this would be really appreciated :)
<b>
User Mode:</b>
<ul>
	<li>Doesn't allow access to hardware</li>
	<li>Protects user Applications from crashing the system</li>
</ul>
<b>Kernel Mode</b>
<ul>
	<li>Privileged mode used by the kernel and device drivers</li>
	<li>Allows access to all system resources -memory</li>
	<li>Exceptions causes the system to crash</li>
</ul>
<b>Process
</b>Process is a manager (a set of resources used to execute a program)
Process is a management object. Process does not run, threads run.
<p style="padding-left:30px;"><b>Consists of:</b><b>
</b>A private virtual address space (2GB/3GB on 32bit, 8TB on 64bit)
An executable program referring to an image file on the disk which has the initial code and data to be executed
Has a private table to handles of various kernel objects- User mode to kernel mode handles (a number)
Ex: If one process has a bad pointer that points to nowhere and causes Null pointer dereference &amp; an exception is thrown, that process may crash &amp; not effecting others
Basic creation functions- <strong>CreateProcess, CreateProcessAsUser</strong>
Terminate when any of the following occur-
All threads in the process terminate
One of the threads calls <strong>ExitProcess(Win32)
</strong>                                   Killed with <strong>TerminateProcess(Win32)</strong>

</p>
<p lang="en-US" style="padding-left:30px;"><strong>Process Creation</strong></p>
<p lang="en-US" style="padding-left:30px;">Flow of Process creation
Open image file-
Create kernel Executive Process object (Kprocess structure is the lowest process &amp; is wrapped with Eprocess structure)
Create initial thread
Create Kernel Executive thread object
Notify CSRSS (win32 sub system )of new process and thread -&gt; requires to be notified.
Complete process and thread initialization
Load required DLLs and initialize
DLLMain function called with DLL_PROCESS_ATTACH reason
Graceful process termination calls DLL_PROCESS_DETATCH which will do                      the required cleanup of log file, memrory etc.
Terminate forcefully, DLLMAIN is not called
Start execution of main entry point (main/winMain)</p>
<p lang="en-US" style="padding-left:30px;">!process 0 0  -&gt; will list all the running process in the system</p>
<p lang="en-US" style="padding-left:30px;">!process &lt;address&gt;</p>
<p style="padding-left:30px;"><img class="alignnone size-full wp-image-192" src="https://threatpointerblog.files.wordpress.com/2017/10/process.png" alt="Process" width="1148" height="588" /></p>
<p style="padding-left:30px;"><strong>dt nt!_eprocess</strong></p>
<p style="padding-left:30px;">Is an undocumented function that provides the inner details of the process at the kernel space</p>
<p style="padding-left:30px;"><strong>peb</strong> - Process Environment Block-&gt; is from the User Space</p>
<p style="padding-left:30px;"><strong>dt nt!_peb

!peb </strong> will display the process execution block and should help us with all .DLLs and command line arguments they accept</p>
<p style="padding-left:30px;">A Security context: Access tokens are used for security checks when accessing shared resources  (Read more about abusing them <a href="https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Windows/Windows_Privilege_Escalation.md#access-token-manipulation" target="_blank" rel="noopener">here</a> or <a href="https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/">here</a>)</p>
<p style="padding-left:30px;"><em>Threads</em><b>: </b>One or more are solely responsible for executing code <b>(</b>When a process is spawned a thread is created under it, which in turn calls the main function of the program<b>)</b><b>&lt;</b>If the thread does get to its message queue for at least 5 seconds- Windows concludes the thread is not able service message and labels it not responsive<b>&gt;
</b></p>
<b>Threads
</b>Thread are the entity scheduled by the kernel to execute code
<p style="padding-left:30px;"><b>Consists of:
</b>Sate of CPU registers
Current access mode (user mode or kernel mode)
<b>Two stacks</b>, one in the user space and one in the kernel space
A private storage area, called Thread Local Storage <b>(TLS)</b>- (its kind of state table)
Optional Security Token- Usually impersonates from the parent process
Optional message queue &amp; windows (info coming from the UI activity) Ex: Anything coming from win32
<b>Priority</b> used in thread scheduling. a number between 0-31 -31 being the highest
<b>A State</b>: running, ready, waiting</p>

Are basically instance of a Function executing code they own:

Context (registers, etc.) and have 2 stacks (User Mode and Kernel Mode)
Optionally, message queue and windows

When a thread is created it is considered a worker thread. It is assumed to do some CPU bound and IO operations. If a thread calls any function within User32 and GDI32 subsystem DLLs Windows creates a message queue for that thread.

Optionally security token: Thread by default runs under the same security token as of the parent process. However,  a thread could impersonate a security token of a different user. Server process, runs with a different identity and is needed to impersonate a client's credentials than using the servers credentials.

Scheduling state
<p style="padding-left:30px;">Priority (0-31)
Lowest being 0 and higest being 31
State
(Ready- has nothing to execute, Wait- does not want to execute and is waiting something to happen, Running- Is presently running state )
Current Access Mode (user or Kernel)</p>
Basic Creation function : <strong>CreateThread(win32)
</strong>Destroyed when:
Thread function returns (Win32)
The thread calls <strong>ExitThread(Win32)</strong>
Polite way of closing thread, it calls DLL main of all DLLS when created or destroyed
Terminated with <strong>TerminateThread(Win32)</strong>
This does not call any of the DLL's main functions that means some resources may leak. We really don't know what has been processed and what is not -if were a lock to be set and would not know if it has happened or not.

<strong>Thread Stacks</strong>:
As we are aware we have two stacks -&gt; at the kernel space and the user space

<strong>In Kernel Space</strong> (12KB on x86) &amp; (24KB non x64)
Resides on the physical memory - most of the time (the times its not we will discuss) Make sure User code cannot interfere with the kernel mode code.
Hardware Interrupts being the other reason
<strong>In User Space</strong> (may be large) By default 1MB is reserved, 64KB committed If the stack goes below 64KB, a guard page is placed just below the last committed page, so that the stack can grow
Can change the initial size
Using the linker settings as new defaults On a thread  by thread basis in the call to <strong>CreateThread/CreateRemoteThread(Ex)</strong>
Can specify a new command as reserved size, but not both Committed is assumed unless the flag STACK_SIZE_IS_A_RESERVATION is used

But how can we control the Thread Stack Size ?
<img class="alignnone size-full wp-image-213" src="https://threatpointerblog.files.wordpress.com/2017/10/threads.png" alt="threads" width="1045" height="556" />As shown in the above screenshot- the default Stack Reserve Size is 1MB &amp; Stack commit Size is 4KB- &gt; this is changeable from this section for the project worked upon.

The other way to control this space is by setting it during the Create Thread function definition<b><img class="alignnone size-full wp-image-217" src="https://threatpointerblog.files.wordpress.com/2017/10/func.png" alt="func" width="655" height="293" />
</b>The commit size is also controllable when replaced it with 0. Specifying zero would tell the program to use defaults.

<b></b><strong>Thread Priorities</strong>
<p style="padding-left:30px;">Thread priorities are between 0 and 31 (31 being the highest)
Priority 0 is reserved for zero page thread
The Windows API mandates thread priority be based on a process priority class (base priority)
So yes, we can change the a thread's priority around the base priority
API's (Win32)
<strong>SetPriorityClass</strong> - changing the process base priority
<strong>SetThreadPriority</strong> change the thread priority offset from the parents base priority
API (Kernel)
<strong>KeSetPriorityThread</strong>- change thread priority to some absolute value (hardcode)</p>
<p style="padding-left:30px;"><strong>Normal Priority
</strong>By Default threads in here have a base priority of 8,using SetThreadPriority function, we can add +1 or +2 as offset or -1 or -1 or -2 as offsets

Two more options- Saturation values-&gt; this means we can go up to 15 being the highest and 1 being the lowest. Normal Priority range allows you to go up to 15 only. Real Time Priority Class beings with 15 and goes upto 31.</p>
<p style="padding-left:30px;"><strong>Above Normal Priority Class</strong></p>
<p style="padding-left:30px;">By Default threads in here have a base priority of 10, we can increase this to 11 or 12 or decrease this to 9 or 8. Saturated values are possible as well and can be between 15 and 1.</p>
<p style="padding-left:30px;"><img class="alignnone size-full wp-image-225" src="https://threatpointerblog.files.wordpress.com/2017/10/thread-priorities.png" alt="Thread Priorities" width="972" height="639" /></p>
<p style="padding-left:30px;">We can see more details about this using Process monitor and CPU stress tool to view the same as mentioned above
<b>
<img class="alignnone size-full wp-image-228" src="https://threatpointerblog.files.wordpress.com/2017/10/stress.png" alt="Stress" width="792" height="718" />
</b></p>
<strong>Thread Scheduling</strong>
<p style="padding-left:30px;">Windows Scheduler schedules the threads
Assuming we have only 1 CPU at a given time how would we priorities and schedules threads to execute ?

Ready Queue is the solution to this problem
Has the threads that are in ready state and based on their priority</p>
<p style="padding-left:30px;"><img class="alignnone size-full wp-image-232" src="https://threatpointerblog.files.wordpress.com/2017/10/priority.png" alt="Priority" width="823" height="661" /></p>
<p style="padding-left:30px;">Priority takes the 1st preference - 1 and 2 will be processed. We will take 1 and move it to the running state.  IT will run for a preiod of time called Thread quantum. After a while it checks and finds another thread is present with the same priority- then removes 1 from the running state and processes 2 to the running state to execute- &gt; it goes to thread quantum and moves 1 back and forth. 3 4 and others will not get the chance to execute.</p>
<p style="padding-left:30px;">If thread 1 or any that is being processed is awaited on any IO operation- it is moved to the waiting state and goes to process the other ones that are in the ready queue.</p>
<p style="padding-left:30px;">While thread 1 with the highest priority was put on the waiting state, when it comes to ready state- any thread that is being processes it stopped and preference is given to thread 1. known as <strong>Preemption
</strong>
Priority based, Preemptive, time-sliced
Highest priority thread runs first
If time slice (quantum) elapses and there is another thread with the same                       priority in the read state - it runs (Otherwise the same thread runs again)
If thread A runs and thread B (with higher priority) receives something it                       waited upon (message, kernel object signalling, etc.) Thread A is preempted and           Thread B becomes the running thread.
Voluntary switch
A thread entering a wait state is dropped from the schedule's ready list
Typical time slice is 30 msec on client, 180 msec on server
On a multi processor system with n logical processors, n concurrent threads may be running.</p>
<strong>The Quantum</strong>

Scheduler clock tick is typically 10 msec (uni-processor) and 15 msec (multi-processor)
Can determine with clockres.exe utility from SysInternals
Default Client Quantum is 2 clock ticks
Default Server Quantum is 12 clock ticks
Quantum can be modified by using the registry or a Job
Quantum boosting-
On a system configured for short variable quantum
The foreground process gets triple quantum
For any process with priority class above idle
Quantum can be found here

<img class="alignnone size-full wp-image-270" src="https://threatpointerblog.files.wordpress.com/2017/10/quantum.png" alt="Quantum" width="818" height="596" />

<strong>Thread Synchronization</strong>

Threads sometime need to coordinate work
Canonical example
Accessing a lined list concurrently from multiple threads
Synchronization is based upon waiting for some condition to occur
The kernel provides a set of synchronization (dispatcher) primitives on which threads can wait efficiently

Kernel Dispatcher Objects

Maintain a state (signaled or non-signaled)
The meaning of signaled depends on the object type
It can wait for multiple objects or on a single object. Windows API: WaitForsigleObject or WaitForMulitpleObjects and similar variants
Kernel Mode: <strong>KeWaitSingleObject, KeWaitForMulipleObjects</strong>

Dispatcher object types:

Process thread, event, mutex, semaphore, timer, file, I/O completion port

High Level wrappers exist

MFC: CSyncObject (abstract base of Cmutex, Csemaphore and others)
.NET: WaitHandle (abstract base of Mutex, Semaphore  and others)

<strong>Signaled Meaning</strong>
<ul>
	<li>Process
<ul>
	<li>The process has terminated</li>
</ul>
</li>
	<li>Thread
<ul>
	<li>The thread has terminiated</li>
</ul>
</li>
	<li>Mutex
<ul>
	<li>The mutex is free</li>
</ul>
</li>
	<li>Event
<ul>
	<li>The event flag is raised</li>
</ul>
</li>
	<li>Semaphore
<ul>
	<li>The semaphore count is greater than zero</li>
</ul>
</li>
	<li>File, I/O completion port
<ul>
	<li>I/O operation completed</li>
</ul>
</li>
	<li>Timer</li>
</ul>
&nbsp;

<strong>MUTEX (</strong>Means Mutual exclusion)
<ul>
	<li>Called mutant in kernel terminology</li>
	<li>Allows a single thread to enter a critical region</li>
	<li>The thread that enters the critical region is the owner of the mutex</li>
	<li>Releasing the mutex allows one (single) thread to acquire it and enter the critical section</li>
	<li>Recursive acquisition is supported. Increments a counter</li>
	<li>If the owning thread does not release the mutex before it terminates, the kernel releases it and the next wait succeeds with a special code (abandoned mutex)</li>
	<li>Mutex is for protecting data while its being processed by the thread</li>
</ul>
<strong>Semaphore</strong>
<ul>
	<li>Maintains a counter (set at creation time)</li>
	<li>Allows x callers to "go through" a gate</li>
	<li>When a thread succeeds a wait, the semaphore counter decreases</li>
	<li>When the counter reaches zero, subsequent wait do not succeed (state is non-signaled)</li>
	<li>Releasing the semaphore increments its counter, releasing a thread that is waiting</li>
</ul>
<strong>
Event</strong>
<ul>
	<li>Maintains a boolean flag</li>
	<li>Event Types
<ul>
	<li>Manual reset( notification in kernel terminology)</li>
	<li>Auto reset (synchronization)</li>
</ul>
</li>
	<li>When set (signaled) threads waiting for it succeed the wait
<ul>
	<li>Manaul reset event releases any number of threads</li>
	<li>Auto reset event releases just one thread
<ul>
	<li>And the event goes automatically to the non signled state</li>
</ul>
</li>
</ul>
</li>
	<li>It's more of flow synchronization ()</li>
	<li>One of them to control the others and ask them to shutdown many processes. Use an event, controlling process and can be set for all processes.</li>
</ul>
<strong>Critical Section</strong>
<ul>
	<li>User Mode replacement for a mutex</li>
	<li>Can be used synchronize threads with a single process (Cross Process sync is no possible &amp; is only possible by Mutex)
<ul>
	<li>Operates on a structure of type CRITICAL_SECTION</li>
</ul>
</li>
	<li>Cheaper than a mutex when no contention exists
<ul>
	<li>No transition to kernel mode in this case</li>
</ul>
</li>
	<li>Uses <strong>EnterCriticalSection</strong> and <strong>LeaveCriticalSection</strong> API fucntions
<ul>
	<li>No way to specify a timeout other than infinite and zero
<ul>
	<li>Zero is accomplished with TryEnterCriticalSection</li>
</ul>
</li>
</ul>
</li>
	<li>.Net
<ul>
	<li>A similar effect is achieved with the lock C# keyword</li>
	<li>Calls the frameworks Monitor.Enter/Exit in a try/finally block</li>
</ul>
</li>
</ul>
<strong>Jobs</strong>
<ul>
	<li>Kernel object that allows managing one (or more) processes as a unit</li>
	<li>System enforces Job quotas and security
<ul>
	<li>Total and per process CPU time, working sets, CPU affinity and priority class, quantum length (for long, fixed quantum only)</li>
	<li>Security Limits</li>
	<li>UI Limits</li>
</ul>
</li>
	<li>API
<ul>
	<li>CreateJobObject /OpenJobObject</li>
	<li>AssignProcessToJobObject (adding a process to a job is a one way operation &amp; is going to be forever)</li>
	<li>TerminateJobObject (can terminate all process under this job)</li>
	<li>SetInformationJobObject (Humangus fucntion with high imporatnce within the API suite)</li>
</ul>
</li>
</ul>
<strong>Objects &amp; Handles:</strong>Objects are runtime instances of static structures Ex: process, mutex, event, desktop, file
<ul>
	<li>Reside in system memory space</li>
	<li>Kernel code can obtain direct pointer to an object</li>
	<li>User mode code can only obtain a handle to an object</li>
	<li>[Handle- shields user code from directly accessing an object</li>
	<li>Security checks can be made- check without any handles]</li>
	<li>Objects are reference counted (every object has its own handle)</li>
	<li>Object Manager is the entity responsible for creating, obtaining and otherwise manipulating objects.</li>
</ul>
<img class="alignnone  wp-image-89" src="https://threatpointerblog.files.wordpress.com/2017/10/mutex.png" alt="mutex" width="727" height="358" />

The above screenshot explains the available handle for a process.

Interesting hack: We are normally unable to launch two instances of Windows Media Player. The reason being, a Mutex- We will find a mutant handle within the Media player process which checks for any other instances, if present it does not allow. However when killed, as shown in the above process we are able to launch two instances, with no issues. :L)
<b>
Virtual Memory</b>
<p style="padding-left:30px;">Each process sees as flat linear memory - meaning, it thinks all of the memory is it to itself
Internally, Virtual Memory may be mapped to physical memory but may also be stored on disk (such as the Page File)
<b>[</b>When a process needs some memory it accesses the memory using a pointer-regardless where it is<b>]
</b>Memory Manager handles mapping of Virtual to Physical Pages
Process cannot know the physical address of a given address in a virtual memory <b>[</b>The Process is configured to run in protected mode- which demands paging<b>]</b> Usually Page is 4KB</p>
<img class="alignnone size-full wp-image-91" src="https://threatpointerblog.files.wordpress.com/2017/10/virtual-memory.png" alt="Virtual Memory" width="926" height="620" />
<strong>Summary
</strong>
<ul>
	<li>A process is a management container for threads to execute code</li>
	<li>A thread executes code on a CPU</li>
	<li>Multiple threads can execute concurrently on multiple CPU's</li>
	<li>Per Process virtual memory provides a private address space isolated from other processes</li>
	<li>Kernel objects are accessed from user mode using private process handles</li>
</ul>
&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date>2017-10-02 10:45:32</wp:post_date>
		<wp:post_date_gmt>2017-10-02 10:45:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows-internals-process-threads</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="windows-internals"><![CDATA[Windows Internals]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_external</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:13778265;s:59:"https://twitter.com/threatpointer/status/914803552538767361";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[9885736172]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_done_13846435</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_13778265</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[threatpointer]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_failed_13846447</wp:meta_key>
			<wp:meta_value><![CDATA[O:13:"Keyring_Error":2:{s:6:"errors";a:1:{s:21:"keyring-request-error";a:1:{i:0;a:6:{s:7:"headers";O:42:"Requests_Utility_CaseInsensitiveDictionary":1:{s:7:" * data";a:12:{s:6:"server";s:17:"Apache-Coyote/1.1";s:15:"x-li-request-id";s:10:"785UPVEIF4";s:4:"date";s:29:"Mon, 02 Oct 2017 10:45:38 GMT";s:4:"vary";s:1:"*";s:11:"x-li-format";s:4:"json";s:12:"content-type";s:30:"application/json;charset=UTF-8";s:16:"content-encoding";s:4:"gzip";s:11:"x-li-fabric";s:9:"prod-lsg1";s:8:"x-li-pop";s:9:"prod-eda6";s:10:"x-li-proto";s:8:"http/1.1";s:10:"set-cookie";s:154:"lidc="b=SB61:g=60:u=293:i=1506941138:t=1507016442:s=AQHlWNFvOjyXx9TZcedtxG9RmdSOc8G0"; Expires=Tue, 03 Oct 2017 07:40:42 GMT; domain=.linkedin.com; Path=/";s:9:"x-li-uuid";s:24:"/LAuOu666RSAtRBFLSsAAA==";}}s:4:"body";s:175:"{
  "errorCode": 0,
  "message": "[unauthorized]. Expired access token. Timestamp: 1461774297516",
  "requestId": "785UPVEIF4",
  "status": 401,
  "timestamp": 1506941138664
}";s:8:"response";a:2:{s:4:"code";i:401;s:7:"message";s:12:"Unauthorized";}s:7:"cookies";a:1:{i:0;O:14:"WP_Http_Cookie":5:{s:4:"name";s:4:"lidc";s:5:"value";s:80:""b=SB61:g=60:u=293:i=1506941138:t=1507016442:s=AQHlWNFvOjyXx9TZcedtxG9RmdSOc8G0"";s:7:"expires";i:1507016442;s:4:"path";s:1:"/";s:6:"domain";s:12:"linkedin.com";}}s:8:"filename";N;s:13:"http_response";O:25:"WP_HTTP_Requests_Response":5:{s:11:" * response";O:17:"Requests_Response":10:{s:4:"body";s:175:"{
  "errorCode": 0,
  "message": "[unauthorized]. Expired access token. Timestamp: 1461774297516",
  "requestId": "785UPVEIF4",
  "status": 401,
  "timestamp": 1506941138664
}";s:3:"raw";s:695:"HTTP/1.1 401 Unauthorized
Server: Apache-Coyote/1.1
x-li-request-id: 785UPVEIF4
Date: Mon, 02 Oct 2017 10:45:38 GMT
Vary: *
x-li-format: json
Content-Type: application/json;charset=UTF-8
Content-Encoding: gzip
X-Li-Fabric: prod-lsg1
Transfer-Encoding: chunked
X-Li-Pop: prod-eda6
X-LI-Proto: http/1.1
Set-Cookie: lidc="b=SB61:g=60:u=293:i=1506941138:t=1507016442:s=AQHlWNFvOjyXx9TZcedtxG9RmdSOc8G0"; Expires=Tue, 03 Oct 2017 07:40:42 GMT; domain=.linkedin.com; Path=/
X-LI-UUID: /LAuOu666RSAtRBFLSsAAA==

{
  "errorCode": 0,
  "message": "[unauthorized]. Expired access token. Timestamp: 1461774297516",
  "requestId": "785UPVEIF4",
  "status": 401,
  "timestamp": 1506941138664
}";s:7:"headers";O:25:"Requests_Response_Headers":1:{s:7:" * data";a:12:{s:6:"server";a:1:{i:0;s:17:"Apache-Coyote/1.1";}s:15:"x-li-request-id";a:1:{i:0;s:10:"785UPVEIF4";}s:4:"date";a:1:{i:0;s:29:"Mon, 02 Oct 2017 10:45:38 GMT";}s:4:"vary";a:1:{i:0;s:1:"*";}s:11:"x-li-format";a:1:{i:0;s:4:"json";}s:12:"content-type";a:1:{i:0;s:30:"application/json;charset=UTF-8";}s:16:"content-encoding";a:1:{i:0;s:4:"gzip";}s:11:"x-li-fabric";a:1:{i:0;s:9:"prod-lsg1";}s:8:"x-li-pop";a:1:{i:0;s:9:"prod-eda6";}s:10:"x-li-proto";a:1:{i:0;s:8:"http/1.1";}s:10:"set-cookie";a:1:{i:0;s:154:"lidc="b=SB61:g=60:u=293:i=1506941138:t=1507016442:s=AQHlWNFvOjyXx9TZcedtxG9RmdSOc8G0"; Expires=Tue, 03 Oct 2017 07:40:42 GMT; domain=.linkedin.com; Path=/";}s:9:"x-li-uuid";a:1:{i:0;s:24:"/LAuOu666RSAtRBFLSsAAA==";}}}s:11:"status_code";i:401;s:16:"protocol_version";d:1.100000000000000088817841970012523233890533447265625;s:7:"success";b:0;s:9:"redirects";i:0;s:3:"url";s:42:"http://api.linkedin.com/v1/people/~/shares";s:7:"history";a:0:{}s:7:"cookies";O:19:"Requests_Cookie_Jar":1:{s:10:" * cookies";a:1:{s:4:"lidc";O:15:"Requests_Cookie":5:{s:4:"name";s:4:"lidc";s:5:"value";s:80:""b=SB61:g=60:u=293:i=1506941138:t=1507016442:s=AQHlWNFvOjyXx9TZcedtxG9RmdSOc8G0"";s:10:"attributes";O:42:"Requests_Utility_CaseInsensitiveDictionary":1:{s:7:" * data";a:3:{s:7:"expires";i:1507016442;s:6:"domain";s:12:"linkedin.com";s:4:"path";s:1:"/";}}s:5:"flags";a:4:{s:8:"creation";i:1506941138;s:11:"last-access";i:1506941138;s:10:"persistent";b:0;s:9:"host-only";b:0;}s:14:"reference_time";i:1506941138;}}}}s:11:" * filename";N;s:4:"data";N;s:7:"headers";N;s:6:"status";N;}}}}s:10:"error_data";a:0:{}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quantum</title>
		<link>https://threatpointerblog.wordpress.com/2017/10/02/windows-internals-process-threads/quantum/</link>
		<pubDate>Mon, 02 Oct 2017 10:23:08 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2017/10/quantum.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date>2017-10-02 10:23:08</wp:post_date>
		<wp:post_date_gmt>2017-10-02 10:23:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>quantum</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>87</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2017/10/quantum.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/quantum.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:818;s:6:"height";i:596;s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/quantum.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:20420;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Signaled</title>
		<link>https://threatpointerblog.wordpress.com/2017/10/02/windows-internals-process-threads/signaled/</link>
		<pubDate>Mon, 02 Oct 2017 10:25:08 +0000</pubDate>
		<dc:creator>threatpointerblog</dc:creator>
		<guid isPermaLink="false">http://threatpointerblog.files.wordpress.com/2017/10/signaled.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date>2017-10-02 10:25:08</wp:post_date>
		<wp:post_date_gmt>2017-10-02 10:25:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>signaled</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>87</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://threatpointerblog.files.wordpress.com/2017/10/signaled.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/signaled.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:664;s:6:"height";i:578;s:4:"file";s:85:"/home/wpcom/public_html/wp-content/blogs.dir/3a2/107622472/files/2017/10/signaled.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:47419;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
